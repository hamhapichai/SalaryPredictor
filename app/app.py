import streamlit as st
import pandas as pd
from autogluon.tabular import TabularPredictor
import pathlib
import platform
plt =  platform.system()
if plt == 'Windows': pathlib.PosixPath = pathlib.WindowsPath

import dclean as dclean

def setup_page():
    st.set_page_config(
        page_title='LittleHR, IT Salary Estimator',
        page_icon=':computer:',
        layout='centered',
    )
    css = open('app/style.css','r')
    st.markdown(f'<style> {css.read()} </style>',unsafe_allow_html=True)

    font = open('app/font.txt','r')
    st.markdown(f'{font.read()}',unsafe_allow_html=True)

def input_thingy():
    col1, col2 = st.columns(2)
        
    # Options ls
    if True:
        province_option = (
        '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ (Bangkok)','‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ (Nonthaburi)','‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ (Pathum Thani)','‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£ (Samut Prakan)','‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ (Kanchanaburi)','‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ (Chanthaburi)','‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤ (Chachoengsao)','‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ (Chonburi)','‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó (Chai Nat)','‡∏ï‡∏£‡∏≤‡∏î (Trad)','‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å (Nakhon Nayok)','‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏° (Nakhon Pathom)','‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå (Prachuap Kiri Kan)','‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ (Prachin Buri)','‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤ (Phra Nahhon Si Ayutthaya)','‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ (Phetchaburi)','‡∏£‡∏∞‡∏¢‡∏≠‡∏á (Rayong)','‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ (Ratchaburi)','‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ (Lopburi)','‡∏™‡∏°‡∏∏‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏° (Samut  Songkhram)','‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£ (Samut Sakhon)','‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß (Sa Kaeo)','‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ (Saraburi)','‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ (Singburi)','‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ (Suphanburi)','‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á (Ang Thong)','‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£ (Kamhaeng Phet)','‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢ (Chiang Rai)','‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà (Chiang Mai)','‡∏ï‡∏≤‡∏Å (Tak)','‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå (Nakhon Sawan)','‡∏ô‡πà‡∏≤‡∏ô (Nan)','‡∏û‡∏∞‡πÄ‡∏¢‡∏≤ (Payao)','‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£ (Phichit)','‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å (Phitsanulok)','‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏π‡∏£‡∏ì‡πå (Phetchabun)','‡πÅ‡∏û‡∏£‡πà (Prae)','‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô (Mae Hong Son)','‡∏•‡∏≥‡∏õ‡∏≤‡∏á (Lumpang)','‡∏•‡∏≥‡∏û‡∏π‡∏ô (Lumpoon)','‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢ (Sukhothai)','‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå (Uttaradit)','‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ (Uthai Thani)','‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå (Kalasin)','‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô (Khon Kaen)','‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥ (Chaiyaphum)','‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏° (Nakhon Phanom)','‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤ (Nakhon Ratchasima)','‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå (Buriram)','‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏° (Maha Sarakham)','‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£ (Mukdahan)','‡∏¢‡πÇ‡∏™‡∏ò‡∏£ (Yasothon)','‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î (Roi Et)','‡πÄ‡∏•‡∏¢ (Loei)','‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏© (Sri Saket)','‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£ (Sakon Nakhon)','‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå (Surin)','‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢ (Nong Khai)','‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π (Nong Bua Lamphu)','‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ (Udon Thani)','‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ (Ubon Ratchathani)','‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç (Amnat Charoen)','‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨ (Bueng Kan)','‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà (Krabi)','‡∏ä‡∏∏‡∏°‡∏û‡∏£ (Chumphon)','‡∏ï‡∏£‡∏±‡∏á (Trang)','‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä (Nakhon Sri Thammarat)','‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™ (Narathiwat)','‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ (Pattani)','‡∏û‡∏±‡∏á‡∏á‡∏≤ (Phang Nga)','‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á (Phatthalung)','‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï (Phuket)','‡∏¢‡∏∞‡∏•‡∏≤ (Yala)','‡∏£‡∏∞‡∏ô‡∏≠‡∏á (Ranong)','‡∏™‡∏á‡∏Ç‡∏•‡∏≤ (Songkla)','‡∏™‡∏ï‡∏π‡∏• (Satun)','‡∏™‡∏∏‡∏£‡∏≤‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ (Surat Thani)'
        )
        edu_option = (
        '‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (Lower than Secondary School)',
        '‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≠‡∏ô‡∏ï‡πâ‡∏ô (Middle School)',
        '‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≠‡∏ô‡∏õ‡∏•‡∏≤‡∏¢ (High School)',
        '‡∏õ‡∏ß‡∏ä. (Vocational Certificate)',
        '‡∏õ‡∏ß‡∏™. (High Vocational Certificate)',
        '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ (Bachelor\'s Degree)',
        '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÇ‡∏ó (Master\'s Degree)',
        '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÄ‡∏≠‡∏Å (Doctoral\'s Degree or PhD)',
        )
        dev_options = (
        'Data scientist or machine learning specialist',
        'Scientist',
        'Academic researcher',
        'Data engineer',
        'Front-end developer',
        'QA or test developer',
        'Designer',
        'Full-stack developer',
        'Data or business analyst',
        'Back-end developer',
        'Database administrator',
        'Product manager',
        'Marketing or sales professional',
        'Engineering manager',
        'System administrator',
        'Embedded applications or devices developer',
        'Mobile developer',
        'Game or graphics developer',
        'Desktop or enterprise applications developer',
        'Educator',
        'DevOps specialist',
        'Site reliability engineer',
        'Senior Executive (C-Suite/VP/etc.)',
        'Consultant',
        'Cloud Engineer',
        'UX/UI Developer',
        'Web Developer',
        'IT Security',
        'Penetration tester',
        'Manager',
        'IT Support',
        'Network Engineer',
        'Security Engineer',
        'Business Intelligence',
        'UI/UX Designer',
        'Human Resource',
        'Robotic Software Engineer',
        'CTO',
        'Director',
        'CEO',
        'Software engineer',
        'System Analyst',
        )
        orgsize_options = (
        '‡∏°‡∏µ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏ó‡∏≥‡∏ó‡∏∏‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (Freelancer/Just me)',
        '2 ‡∏Ñ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏Ñ‡∏ô (2 to 19 employees)',
        '20 ‡∏Ñ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏Ñ‡∏ô (20 to 99 employees)',
        '100 ‡∏Ñ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1,000 ‡∏Ñ‡∏ô (100 to 999 employees)',
        '1,000 ‡∏Ñ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10,000 ‡∏Ñ‡∏ô (1,000 to 9,999 employees)',
        '10,000 ‡∏Ñ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ (10,000 or more employees)',
        )
    # EdLevel
    edlv = col1.selectbox(
    'üè´‡∏ß‡∏∏‡∏í‡∏¥‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢',
    index = 5,
    options=edu_option,)
    # WorkPlace
    workplace = col2.selectbox(
        'üè¢‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô/‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏≠‡∏¢‡∏π‡πà',
        options=province_option)
    # YearsCodePro
    code_pro = col1.number_input(
        'üß∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏µ‡πà‡∏õ‡∏µ?',
        min_value=0.0,
        max_value=50.0,
            step=0.5)
    # YearsCode
    code = col1.number_input(
        'üñ•Ô∏è‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏µ‡πà‡∏õ‡∏µ? (‡∏£‡∏ß‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏î‡πâ‡∏ß‡∏¢)',
        min_value=0.0,
        max_value=50.0,
        step=0.5)
    # if code < code_pro:
    #     code += code_pro
    # DevType
    devtype_arr = col2.multiselect(
        'üñ±Ô∏è‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô',
        options=dev_options)
    devtype = ', '.join(devtype_arr)
    # OrgSize
    orgsize = col2.selectbox(
        'üè¢‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£',
        options=orgsize_options)
    # Employment
    employ = col2.radio(
        '‚è∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö',
        options=['Full-time','Part-time','Freelance'],
        horizontal=True)

    data_input = {
            'WorkPlace': dclean.wplace(workplace),
            'EdLevel': dclean.edu(edlv),
            'YearsCodePro': code_pro,
            'YearsCode': code,
            'Employment': dclean.employ(employ),
            'DevType': devtype,
            'OrgSize': dclean.orgsize(orgsize),
        }
    data_input = pd.DataFrame(data=data_input, index=[0])
    return data_input

def salary_display(salary):
    offset = salary * 0.03
    low = '{}'.format(round(salary - offset))
    high = '{}'.format(round(salary + offset))

    salary = [low, high]

    for s in range(2):
        front = salary[s][:len(salary[s])%3]
        salary[s] = salary[s][len(salary[s])%3:]
        back = ''
        for i in range(len(salary[s])):
            if i % 3 == 0:
                back += ','
            back += salary[s][i]
        
        if front != '':
            salary[s] = front + back
        else:
            salary[s] = back[1:]
    
    return f'üè∑Ô∏è{salary[0]} - {salary[1]} ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'

def sidebar_thingy():
    with st.sidebar:
        st.markdown('<bighead>‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ‡πÄ‡∏ó‡∏≠‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå</bighead>', unsafe_allow_html=True)
        st.markdown('<bighead>üìú About this project</bighead>', unsafe_allow_html=True)
        st.markdown('<text style=\'font-size:14px;\'>‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏™‡∏≤‡∏¢ IT ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Machine Learning Regression Model ‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏™‡∏≤‡∏¢ IT ‡∏ú‡πà‡∏≤‡∏ô Social Media ‡πÉ‡∏ô‡∏õ‡∏µ‡∏û.‡∏®.2565</text>',unsafe_allow_html=True)

def output_thingy(data_input, m):
    
    # st.write(data_input)

    predictor = TabularPredictor.load('app/ag-models')
    result = predictor.predict(data_input)

    st.header('‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠')

    st.title(salary_display(result.values[0] * m * 1e4))

if __name__ == '__main__':
    setup_page()

    st.markdown(
        """
        <text style="font-size: 60px;font-family:'Sarabun', sans-serif;font-weight: bold;">üîçLittleHR</text>
        <text style="font-size: 30px;font-family: 'Sarabun', sans-serif;font-weight: bold;">: Thai IT Job's Salary Estimator</text><br>
        <text style="font-size: 30px;font-family: 'Sarabun', sans-serif;font-weight: bold;padding:0px 0px 0px 60px">‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏™‡∏≤‡∏¢ IT ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢</text>
        """
        ,unsafe_allow_html=True)

    ## sidebar_thingy()
   
    st.header(' ')
    with st.form('my_form'):

        data_input = input_thingy()
        
        if st.form_submit_button('üîç ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô'):
            m = 1
            if data_input.at[0,'Employment'] == 0:
                m = 0.75
            
            if data_input.at[0,'DevType'] != '':
                with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏£‡πà‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏¥...'):
                    output_thingy(data_input, m)
            else:
                st.error('‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô')

    